# Docker Compose for microservices development
version: '3.8'

services:
  # C++ Microservices Development Environment
  microservices-dev:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        USERNAME: developer
        USER_UID: 1000
        USER_GID: 1000
    container_name: cpp-microservices-dev
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    tty: true
    stdin_open: true
    command: /bin/bash
    networks:
      - microservices-net

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: api-gateway
    ports:
      - "8080:8080"  # Main API Gateway port
    volumes:
      - ./build:/app/build:ro  # Mount compiled microservices as read-only
    environment:
      - NODE_ENV=production
      - PORT=8080
      - BUILD_PATH=/app/build
      - SERVICE_TIMEOUT=5000
    depends_on:
      - microservices-dev
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { if (res.statusCode === 200 || res.statusCode === 503) process.exit(0); else process.exit(1); }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Legacy serverless functions (optional - can be disabled)
  hello-function:
    image: local/hello-simple:latest
    container_name: hello-function
    ports:
      - "8082:8080"
    restart: unless-stopped
    networks:
      - microservices-net
    profiles:
      - serverless  # Only start with --profile serverless

  users-function:
    image: local/users-api:latest
    container_name: users-function
    ports:
      - "8083:8080"
    volumes:
      - ./build:/home/rdias/cpp-rest-server:ro
    restart: unless-stopped
    networks:
      - microservices-net
    profiles:
      - serverless

  orders-function:
    image: local/orders-api:latest
    container_name: orders-function
    ports:
      - "8084:8080"
    volumes:
      - ./build:/home/rdias/cpp-rest-server:ro
    restart: unless-stopped
    networks:
      - microservices-net
    profiles:
      - serverless

networks:
  microservices-net:
    driver: bridge