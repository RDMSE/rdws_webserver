name: CI - Build and Test Microservices

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Debug
  BUILD_DIR: ${{ github.workspace }}/build
  NODE_VERSION: '20'

jobs:
  # Job 1: Build and test C++ microservices
  build-cpp-microservices:
    name: Build C++ Microservices
    runs-on: [self-hosted, Linux, X64, webserver, fedora]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Clean previous builds
      run: |
        rm -rf ${{ env.BUILD_DIR }}
        mkdir -p ${{ env.BUILD_DIR }}

    - name: Verify environment
      run: |
        echo "Running on self-hosted Fedora runner"
        echo "Build directory: ${{ env.BUILD_DIR }}"
        whoami
        pwd
        which cmake || echo "CMake not found"
        which g++ || echo "g++ not found"
        which node || echo "Node.js not found"
        which npm || echo "npm not found"

    - name: Install dependencies if needed
      run: |
        # Check and install CMake if needed
        if ! command -v cmake &> /dev/null; then
          echo "Installing CMake..."
          sudo dnf install -y cmake
        fi

        # Check and install build tools if needed
        if ! command -v g++ &> /dev/null; then
          echo "Installing build tools..."
          sudo dnf groupinstall -y "Development Tools"
          sudo dnf install -y gcc-c++
        fi

        # Check and install Google Test if needed
        if ! pkg-config --exists gtest; then
          echo "Installing Google Test..."
          sudo dnf install -y gtest-devel gmock-devel
        fi

    - name: Configure CMake
      run: |
        cd ${{ env.BUILD_DIR }}
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_CXX_STANDARD=17 \
          -G "Unix Makefiles"

    - name: Build C++ microservices
      run: |
        cd ${{ env.BUILD_DIR }}
        make -j$(nproc)

        # Verify that microservices were built
        echo "Verifying microservices..."
        ls -la services/*/
        find . -name "*_service" -type f -executable

    - name: Test microservices executables
      run: |
        cd ${{ env.BUILD_DIR }}

        echo "Testing users_service..."
        if [ -f "./services/users/users_service" ]; then
          ./services/users/users_service "GET" "/users"
        else
          echo "ERROR: users_service not found"
          exit 1
        fi

        echo "Testing orders_service..."
        if [ -f "./services/orders/orders_service" ]; then
          ./services/orders/orders_service "GET" "/orders"
        else
          echo "ERROR: orders_service not found"
          exit 1
        fi

    - name: Run C++ tests
      run: |
        cd ${{ env.BUILD_DIR }}

        # Debug: Show current directory structure
        echo "Current directory structure:"
        pwd
        ls -la
        echo "Services directory:"
        ls -la services/ || echo "No services directory"
        echo "Tests directory:"
        ls -la tests/ || echo "No tests directory"

        # Run microservice tests
        if [ -f "tests/microservice_tests" ]; then
          echo "Running microservice_tests..."
          ./tests/microservice_tests --gtest_output=xml:microservice_test_results.xml
        else
          echo "microservice_tests not found"
        fi

        # Run individual service tests
        if [ -f "tests/users_service_tests" ]; then
          echo "Running users_service_tests..."
          ./tests/users_service_tests --gtest_output=xml:users_test_results.xml
        else
          echo "users_service_tests not found"
        fi

        if [ -f "tests/orders_service_tests" ]; then
          echo "Running orders_service_tests..."
          ./tests/orders_service_tests --gtest_output=xml:orders_test_results.xml
        else
          echo "orders_service_tests not found"
        fi

    - name: Upload C++ test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cpp-test-results-${{ github.run_number }}
        path: |
          ${{ env.BUILD_DIR }}/*_test_results.xml

    - name: Upload microservices binaries
      uses: actions/upload-artifact@v4
      with:
        name: microservices-binaries-${{ github.run_number }}
        path: |
          ${{ env.BUILD_DIR }}/services/  # Job 2: Test API Gateway (Node.js)
  test-api-gateway:
    name: Test API Gateway
    runs-on: [self-hosted, Linux, X64, webserver, fedora]
    needs: build-cpp-microservices

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      run: |
        # Check if Node.js is installed
        if ! command -v node &> /dev/null; then
          echo "Installing Node.js..."
          curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -
          sudo dnf install -y nodejs
        fi

        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"

    - name: Download microservices binaries
      uses: actions/download-artifact@v4
      with:
        name: microservices-binaries-${{ github.run_number }}
        path: ${{ env.BUILD_DIR }}

    - name: Make binaries executable
      run: |
        echo "Checking downloaded artifacts..."
        find ${{ env.BUILD_DIR }} -name "*_service" -type f
        ls -la ${{ env.BUILD_DIR }}/

        # Make executable if they exist
        if [ -f "${{ env.BUILD_DIR }}/services/users/users_service" ]; then
          chmod +x ${{ env.BUILD_DIR }}/services/users/users_service
          echo "users_service made executable"
        else
          echo "ERROR: users_service not found at expected location"
          echo "Looking for users_service anywhere..."
          find ${{ env.BUILD_DIR }} -name "users_service" -type f
          exit 1
        fi

        if [ -f "${{ env.BUILD_DIR }}/services/orders/orders_service" ]; then
          chmod +x ${{ env.BUILD_DIR }}/services/orders/orders_service
          echo "orders_service made executable"
        else
          echo "ERROR: orders_service not found at expected location"
          echo "Looking for orders_service anywhere..."
          find ${{ env.BUILD_DIR }} -name "orders_service" -type f
          exit 1
        fi

    - name: Install API Gateway dependencies
      run: |
        npm ci

    - name: Run API Gateway tests
      env:
        BUILD_PATH: ${{ env.BUILD_DIR }}
      run: |
        npm test

    - name: Upload API Gateway test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-gateway-test-results-${{ github.run_number }}
        path: |
          coverage/
          junit.xml

  # Job 3: Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: [self-hosted, Linux, X64, webserver, fedora]
    needs: [build-cpp-microservices, test-api-gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download microservices binaries
      uses: actions/download-artifact@v4
      with:
        name: microservices-binaries-${{ github.run_number }}
        path: ${{ env.BUILD_DIR }}

    - name: Make binaries executable
      run: |
        echo "Checking downloaded artifacts for integration tests..."
        find ${{ env.BUILD_DIR }} -name "*_service" -type f
        ls -la ${{ env.BUILD_DIR }}/

        # Make executable if they exist
        if [ -f "${{ env.BUILD_DIR }}/services/users/users_service" ]; then
          chmod +x ${{ env.BUILD_DIR }}/services/users/users_service
          echo "users_service made executable"
        else
          echo "ERROR: users_service not found"
          find ${{ env.BUILD_DIR }} -name "users_service" -type f
          exit 1
        fi

        if [ -f "${{ env.BUILD_DIR }}/services/orders/orders_service" ]; then
          chmod +x ${{ env.BUILD_DIR }}/services/orders/orders_service
          echo "orders_service made executable"
        else
          echo "ERROR: orders_service not found"
          find ${{ env.BUILD_DIR }} -name "orders_service" -type f
          exit 1
        fi

    - name: Install dependencies
      run: |
        npm ci

    - name: Start API Gateway in background
      env:
        BUILD_PATH: ${{ env.BUILD_DIR }}
        PORT: 8080
      run: |
        nohup node api-gateway.js > gateway.log 2>&1 &
        echo $! > gateway.pid
        sleep 5

    - name: Run integration tests
      run: |
        chmod +x scripts/verify-deploy.sh
        ./scripts/verify-deploy.sh

    - name: Stop API Gateway
      if: always()
      run: |
        if [ -f gateway.pid ]; then
          kill $(cat gateway.pid) || true
          rm gateway.pid
        fi

    - name: Upload integration test logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-logs-${{ github.run_number }}
        path: |
          gateway.log

  # Summary job that depends on all others
  ci-summary:
    name: CI Summary
    runs-on: [self-hosted, Linux, X64, webserver, fedora]
    needs: [build-cpp-microservices, test-api-gateway, integration-tests]
    if: always()

    steps:
    - name: Check CI results
      run: |
        echo "CI Summary:"
        echo "- C++ Microservices Build: ${{ needs.build-cpp-microservices.result }}"
        echo "- API Gateway Tests: ${{ needs.test-api-gateway.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"

        if [[ "${{ needs.build-cpp-microservices.result }}" == "success" &&
              "${{ needs.test-api-gateway.result }}" == "success" &&
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ All critical CI jobs passed!"
          exit 0
        else
          echo "❌ Some CI jobs failed!"
          exit 1
        fi
