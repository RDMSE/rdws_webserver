name: CI - Build and Test Microservices

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  BUILD_TYPE: Debug
  BUILD_DIR: ${{ github.workspace }}/build
  NODE_VERSION: '20'
  RDWS_ENVIRONMENT: production
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_NAME_DEV: ${{ secrets.DB_NAME_DEV }}
  DB_NAME_PROD: ${{ secrets.DB_NAME_PROD }}

jobs:
  build-cpp-microservices:
    name: Build C++ Microservices
    runs-on: [self-hosted, Linux, X64, webserver, fedora]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: true
      - name: Clean previous builds
        run: |
          rm -rf ${{ env.BUILD_DIR }}
          mkdir -p ${{ env.BUILD_DIR }}
      - name: Verify environment
        run: |
          echo "Running on self-hosted Fedora runner"
          echo "Build directory: ${{ env.BUILD_DIR }}"
          echo "Environment: ${{ env.RDWS_ENVIRONMENT }}"
          echo "Database DEV: ${{ env.DB_NAME_DEV }}"
          echo "Database PROD: ${{ env.DB_NAME_PROD }}"
          whoami
          pwd
          which cmake || echo "CMake not found"
          which g++ || echo "g++ not found"
          which node || echo "Node.js not found"
          which npm || echo "npm not found"
      - name: Load database environment
        run: |
          echo "Loading database environment variables..."
          source scripts/load_env.sh ${{ env.RDWS_ENVIRONMENT }}
          echo "Database configuration loaded for environment: ${{ env.RDWS_ENVIRONMENT }}"
      - name: Check .env.${{ env.RDWS_ENVIRONMENT }} exists
        run: |
          ENV_FILE=".env.${{ env.RDWS_ENVIRONMENT }}"
          if [ -f "$ENV_FILE" ]; then
            echo "$ENV_FILE found."
          else
            echo "ERROR: $ENV_FILE not found!"
            exit 1
          fi
      - name: Install dependencies if needed
        run: |
          if ! command -v cmake &> /dev/null; then
            echo "Installing CMake..."
            sudo dnf install -y cmake
          fi
          if ! command -v g++ &> /dev/null; then
            echo "Installing build tools..."
            sudo dnf groupinstall -y "Development Tools"
            sudo dnf install -y gcc-c++
          fi
          if ! pkg-config --exists gtest; then
            echo "Installing Google Test..."
            sudo dnf install -y gtest-devel gmock-devel
          fi
          if ! pkg-config --exists libpqxx; then
            echo "Installing libpqxx..."
            sudo dnf install -y libpqxx-devel
          fi
          if ! pkg-config --exists jsoncpp; then
            echo "Installing jsoncpp..."
            sudo dnf install -y jsoncpp-devel
          fi
          if ! command -v ninja &> /dev/null; then
            echo "Installing Ninja build system..."
            sudo dnf install -y ninja-build
          fi
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -
            sudo dnf install -y nodejs
          fi
      - name: Configure CMake
        run: |
          cd ${{ env.BUILD_DIR }}
          cmake .. -GNinja
      - name: Build C++ microservices
        run: |
          cd ${{ env.BUILD_DIR }}
          ninja
          echo "Verifying microservices..."
          ls -la src/services/*/
          find . -name "*_service" -type f -executable
      - name: Test microservices executables
        run: |
          cd ${{ env.BUILD_DIR }}
          echo "Testing users_service..."
          if [ -f "./src/services/users/users_service" ]; then
            echo "SUCCESS: users_service found"
          else
            echo "ERROR: users_service not found"
            exit 1
          fi
          echo "Testing orders_service..."
          if [ -f "./src/services/orders/orders_service" ]; then
            echo "SUCCESS: orders_service found"
          else
            echo "ERROR: orders_service not found"
            exit 1
          fi
      - name: Run C++ tests
        run: |
          cd ${{ env.BUILD_DIR }}
          echo "Current directory structure:"
          pwd
          ls -la
          echo "Services directory:"
          ls -la src/services/ || echo "No services directory"
          echo "Tests directory:"
          ls -la tests/ || echo "No tests directory"
          if [ -f "tests/microservice_tests" ]; then
            echo "Running microservice_tests..."
            ./tests/microservice_tests --gtest_output=xml:microservice_test_results.xml
          else
            echo "microservice_tests not found"
          fi
          if [ -f "tests/users_service_unit_tests" ]; then
            echo "Running users_service_unit_tests..."
            ./tests/users_service_unit_tests --gtest_output=xml:users_test_results.xml
          else
            echo "users_service_unit_tests not found"
          fi
          if [ -f "tests/orders_service_unit_tests" ]; then
            echo "Running orders_service_unit_tests..."
            ./tests/orders_service_unit_tests --gtest_output=xml:orders_test_results.xml
          else
            echo "orders_service_unit_tests not found"
          fi
      - name: Upload C++ test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cpp-test-results-${{ github.run_number }}
          path: |
            ${{ env.BUILD_DIR }}/*_test_results.xml
      - name: Check microservices before upload
        run: |
          echo "Checking if microservices were built..."
          if [ ! -f "${{ env.BUILD_DIR }}/src/services/users/users_service" ]; then
            echo "ERROR: users_service not found"
            exit 1
          fi
          if [ ! -f "${{ env.BUILD_DIR }}/src/services/orders/orders_service" ]; then
            echo "ERROR: orders_service not found"
            exit 1
          fi
          echo "Both microservices found, proceeding with upload"
      - name: Upload microservices binaries
        uses: actions/upload-artifact@v4
        with:
          name: microservices-binaries-${{ github.run_number }}
          path: |
            ${{ env.BUILD_DIR }}/src/services/
      - name: Verify uploaded artifacts
        run: |
          echo "Verifying artifacts that were uploaded..."
          find ${{ env.BUILD_DIR }}/src/services/ -name "*_service" -type f -ls || echo "No service executables found"
