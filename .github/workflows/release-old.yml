name: Release Microservices API Gateway

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3-beta
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  BUILD_TYPE: Release
  NODE_VERSION: '20'

jobs:
  create-release:
    name: Create Release Package
    runs-on: [self-hosted, Linux, X64, webserver, fedora]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog

    - name: Get version info
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Clean and prepare
      run: |
        rm -rf build packages
        mkdir -p build packages

    - name: Verify and install dependencies
      run: |
        echo "Verifying environment for release build..."
        
        # Install Node.js if needed
        if ! command -v node &> /dev/null; then
          echo "Installing Node.js..."
          curl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -
          sudo dnf install -y nodejs
        fi
        
        # Install build tools if needed
        if ! command -v cmake &> /dev/null; then
          echo "Installing build tools..."
          sudo dnf install -y cmake gcc-c++ make
        fi
        
        echo "Node.js version: $(node --version)"
        echo "CMake version: $(cmake --version | head -1)"

    - name: Build C++ microservices
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_STANDARD=17
        make -j$(nproc)
        
        echo "Verifying microservices..."
        ./services/users/users_service "GET" "/users" | head -2
        ./services/orders/orders_service "GET" "/orders" | head -2

    - name: Install and test API Gateway
      run: |
        npm ci --production
        BUILD_PATH=./build npm test

    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog..."
        
        # Get previous tag for changelog
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "Changes since $PREV_TAG:" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "Initial release" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release packages
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "Creating release packages for $VERSION..."
        
        # Create binary package
        mkdir -p packages/rdws-microservices-$VERSION
        
        # Copy microservices binaries
        cp -r build/services packages/rdws-microservices-$VERSION/
        
        # Copy API Gateway and dependencies
        cp api-gateway.js packages/rdws-microservices-$VERSION/
        cp package*.json packages/rdws-microservices-$VERSION/
        
        # Copy documentation and scripts
        cp -r scripts packages/rdws-microservices-$VERSION/
        cp README.md API-GATEWAY.md DEPLOY-*.md packages/rdws-microservices-$VERSION/
        
        # Copy Docker files
        cp Dockerfile.gateway docker-compose.yml packages/rdws-microservices-$VERSION/
        
        # Create installation script
        cat > packages/rdws-microservices-$VERSION/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing RDWS Microservices API Gateway..."
        
        # Install to /opt if run as root, otherwise to ~/rdws_webserver
        if [ "$EUID" -eq 0 ]; then
          INSTALL_DIR="/opt/rdws_webserver"
        else
          INSTALL_DIR="$HOME/rdws_webserver"
        fi
        
        echo "Installing to: $INSTALL_DIR"
        mkdir -p "$INSTALL_DIR"
        cp -r * "$INSTALL_DIR/"
        chmod +x "$INSTALL_DIR/scripts/"*.sh
        
        echo "Installation completed!"
        echo "To start: cd $INSTALL_DIR && npm install && npm start"
        EOF
        
        chmod +x packages/rdws-microservices-$VERSION/install.sh
        
        # Create tarball
        cd packages
        tar -czf rdws-microservices-$VERSION.tar.gz rdws-microservices-$VERSION/
        
        # Create zip
        zip -r rdws-microservices-$VERSION.zip rdws-microservices-$VERSION/
        
        cd ..
        
        echo "Release packages created:"
        ls -la packages/

    - name: Create Docker image
      run: |
        VERSION="${{ steps.version.outputs.version_number }}"
        
        echo "Building Docker image for version $VERSION..."
        
        # Build the API Gateway image
        docker build -f Dockerfile.gateway -t rdws-api-gateway:$VERSION .
        docker tag rdws-api-gateway:$VERSION rdws-api-gateway:latest
        
        # Save Docker image as file
        docker save rdws-api-gateway:$VERSION | gzip > packages/rdws-api-gateway-$VERSION.tar.gz
        
        echo "Docker image created and saved"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: ${{ steps.version.outputs.version }}
        body: |
          # üöÄ RDWS Microservices API Gateway ${{ steps.version.outputs.version }}
          
          ## üì¶ What's Included
          
          - **C++ Microservices**: `users_service`, `orders_service`
          - **API Gateway**: Node.js Express server with proxy functionality
          - **Deploy Scripts**: Automated deployment for Fedora Server
          - **Docker Support**: Complete containerization setup
          - **Documentation**: Complete setup and API documentation
          
          ## üìã Quick Install
          
          ```bash
          # Download and extract
          wget https://github.com/RDMSE/rdws_webserver/releases/download/${{ steps.version.outputs.version }}/rdws-microservices-${{ steps.version.outputs.version }}.tar.gz
          tar -xzf rdws-microservices-${{ steps.version.outputs.version }}.tar.gz
          cd rdws-microservices-${{ steps.version.outputs.version }}
          
          # Install
          ./install.sh
          
          # Start
          npm install && npm start
          ```
          
          ## üê≥ Docker Install
          
          ```bash
          # Load Docker image
          docker load < rdws-api-gateway-${{ steps.version.outputs.version_number }}.tar.gz
          
          # Run
          docker run -d -p 8080:8080 rdws-api-gateway:${{ steps.version.outputs.version_number }}
          ```
          
          ## üì° API Endpoints
          
          - `GET /health` - Service health check
          - `GET /users` - List all users  
          - `GET /orders` - List all orders
          - `GET /api-docs` - API documentation
          
          ## üìñ Documentation
          
          - [API Gateway Guide](API-GATEWAY.md)
          - [Fedora Deploy Guide](DEPLOY-FEDORA.md)
          - [Quick Deploy Guide](DEPLOY-QUICK.md)
          
          ## üîÑ Changelog
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./packages/rdws-microservices-${{ steps.version.outputs.version }}.tar.gz
        asset_name: rdws-microservices-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload zip asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./packages/rdws-microservices-${{ steps.version.outputs.version }}.zip
        asset_name: rdws-microservices-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip

    - name: Upload Docker image
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./packages/rdws-api-gateway-${{ steps.version.outputs.version_number }}.tar.gz
        asset_name: rdws-api-gateway-${{ steps.version.outputs.version_number }}.tar.gz
        asset_content_type: application/gzip

    - name: Release summary
      run: |
        echo "üéâ Release ${{ steps.version.outputs.version }} created successfully!"
        echo ""
        echo "üì¶ Assets uploaded:"
        echo "  - rdws-microservices-${{ steps.version.outputs.version }}.tar.gz"
        echo "  - rdws-microservices-${{ steps.version.outputs.version }}.zip" 
        echo "  - rdws-api-gateway-${{ steps.version.outputs.version_number }}.tar.gz"
        echo ""
        echo "üîó Release URL: https://github.com/RDMSE/rdws_webserver/releases/tag/${{ steps.version.outputs.version }}"
        cd build
        PKG_CONFIG_PATH=${{ env.PKG_CONFIG_PATH }} cmake .. \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_CXX_STANDARD=17
        make -j$(nproc)

    - name: Run all tests
      run: |
        cd build
        make unit_tests integration_tests
        ./tests/unit_tests --gtest_output=xml:release_unit_test_results.xml
        ./tests/integration_tests --gtest_output=xml:release_integration_test_results.xml

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_no_v=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Create release package
      run: |
        VERSION="${{ steps.version.outputs.version_no_v }}"
        PACKAGE_NAME="cpp-rest-server-$VERSION"

        # Create package directory
        mkdir -p packages/$PACKAGE_NAME

        # Copy binary and essential files
        cp build/rest_server packages/$PACKAGE_NAME/
        cp -r scripts packages/$PACKAGE_NAME/
        cp README.md packages/$PACKAGE_NAME/
        cp DEVELOPMENT.md packages/$PACKAGE_NAME/

        # Create startup script
        cat > packages/$PACKAGE_NAME/start_server.sh << 'EOF'
        #!/bin/bash
        # C++ REST Server Startup Script
        cd "$(dirname "$0")"
        echo "Starting C++ REST Server..."
        ./rest_server
        EOF
        chmod +x packages/$PACKAGE_NAME/start_server.sh

        # Create systemd service file
        cat > packages/$PACKAGE_NAME/cpp-rest-server.service << 'EOF'
        [Unit]
        Description=C++ REST Server
        After=network.target

        [Service]
        Type=simple
        User=rdias
        WorkingDirectory=/opt/cpp-rest-server
        ExecStart=/opt/cpp-rest-server/rest_server
        Restart=always
        RestartSec=3

        [Install]
        WantedBy=multi-user.target
        EOF

        # Create install script
        cat > packages/$PACKAGE_NAME/install.sh << 'EOF'
        #!/bin/bash
        echo "Installing C++ REST Server..."

        # Create installation directory
        sudo mkdir -p /opt/cpp-rest-server

        # Copy files
        sudo cp rest_server /opt/cpp-rest-server/
        sudo cp -r scripts /opt/cpp-rest-server/
        sudo cp start_server.sh /opt/cpp-rest-server/
        sudo chmod +x /opt/cpp-rest-server/rest_server
        sudo chmod +x /opt/cpp-rest-server/start_server.sh
        sudo chmod +x /opt/cpp-rest-server/scripts/*.sh

        # Install systemd service (optional)
        if [ "$1" = "--systemd" ]; then
            sudo cp cpp-rest-server.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable cpp-rest-server
            echo "Systemd service installed. Start with: sudo systemctl start cpp-rest-server"
        fi

        echo "Installation complete!"
        echo "Manual start: /opt/cpp-rest-server/start_server.sh"
        EOF
        chmod +x packages/$PACKAGE_NAME/install.sh

        # Create the package
        cd packages
        tar czf $PACKAGE_NAME.tar.gz $PACKAGE_NAME
        cd ..

        # Create checksums
        cd packages
        sha256sum $PACKAGE_NAME.tar.gz > $PACKAGE_NAME.tar.gz.sha256
        cd ..

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD)
        else
          COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
        fi

        # Create changelog
        cat > CHANGELOG.md << EOF
        # Changes in ${{ steps.version.outputs.version }}

        ## What's New

        $COMMITS

        ## Package Contents
        - \`rest_server\` - Main server binary
        - \`scripts/\` - Deployment and management scripts
        - \`install.sh\` - Installation script
        - \`start_server.sh\` - Quick start script
        - \`cpp-rest-server.service\` - Systemd service file

        ## Installation

        ### Quick Install
        \`\`\`bash
        tar xzf cpp-rest-server-${{ steps.version.outputs.version_no_v }}.tar.gz
        cd cpp-rest-server-${{ steps.version.outputs.version_no_v }}
        ./install.sh
        \`\`\`

        ### With Systemd Service
        \`\`\`bash
        ./install.sh --systemd
        sudo systemctl start cpp-rest-server
        \`\`\`

        ### Manual Start
        \`\`\`bash
        ./start_server.sh
        \`\`\`

        ## Verification
        \`\`\`bash
        curl http://localhost:9080/hello
        # Should return: Hello World from C++ REST Server!
        \`\`\`
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          packages/cpp-rest-server-${{ steps.version.outputs.version_no_v }}.tar.gz
          packages/cpp-rest-server-${{ steps.version.outputs.version_no_v }}.tar.gz.sha256
          build/release_unit_test_results.xml
          build/release_integration_test_results.xml
        prerelease: ${{ github.event.inputs.prerelease || contains(steps.version.outputs.version, '-') }}
        draft: false

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: |
          packages/cpp-rest-server-${{ steps.version.outputs.version_no_v }}.tar.gz
          packages/cpp-rest-server-${{ steps.version.outputs.version_no_v }}.tar.gz.sha256
          CHANGELOG.md

  deploy-release:
    name: Deploy Release to Production
    needs: create-release
    runs-on: [self-hosted, Linux, X64, webserver, fedora]
    environment: production
    if: ${{ !github.event.inputs.prerelease && !contains(github.ref_name, '-') }}

    steps:
    - name: Download release package
      uses: actions/download-artifact@v4
      with:
        name: release-package

    - name: Install release locally
      run: |
        # Extract and install package locally
        tar xzf cpp-rest-server-*.tar.gz
        cd cpp-rest-server-*
        sudo ./install.sh --systemd
