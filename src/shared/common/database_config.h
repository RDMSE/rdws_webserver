#pragma once
/**
 * Database Configuration Manager for C++ Microservices
 * 
 * Reads configuration from JSON file generated by deploy scripts
 * Supports both file-based config and environment variables as fallback
 */

#include <string>
#include <fstream>
#include <cstdlib>
#include <stdexcept>

#ifdef USE_JSON
#include <nlohmann/json.hpp>
#endif

namespace rdws {

class DatabaseConfig {
private:
    std::string host;
    std::string port;
    std::string user;
    std::string password;
    std::string database;
    std::string environment;
    
    bool loadFromFile(const std::string& config_path = "/opt/rdws_webserver/config/database.json") {
        try {
#ifdef USE_JSON
            std::ifstream file(config_path);
            if (!file.is_open()) {
                return false;
            }
            
            nlohmann::json config;
            file >> config;
            
            host = config["host"].get<std::string>();
            port = std::to_string(config["port"].get<int>());
            user = config["user"].get<std::string>();
            password = config["password"].get<std::string>();
            database = config["database"].get<std::string>();
            environment = config["environment"].get<std::string>();
            
            return true;
#else
            return false; // JSON support not compiled
#endif
        } catch (const std::exception& e) {
            return false;
        }
    }
    
    void loadFromEnvironment() {
        host = std::getenv("DB_HOST") ? std::getenv("DB_HOST") : "localhost";
        port = std::getenv("DB_PORT") ? std::getenv("DB_PORT") : "5432";
        user = std::getenv("DB_USER") ? std::getenv("DB_USER") : "postgres";
        password = std::getenv("DB_PASS") ? std::getenv("DB_PASS") : "";
        database = std::getenv("DB_NAME") ? std::getenv("DB_NAME") : "postgres";
        environment = std::getenv("ENVIRONMENT") ? std::getenv("ENVIRONMENT") : "development";
    }

public:
    DatabaseConfig() {
        // Try to load from config file first, then fallback to environment
        if (!loadFromFile()) {
            loadFromEnvironment();
        }
        
        // Validate required fields
        if (host.empty() || user.empty() || database.empty()) {
            throw std::runtime_error("Database configuration incomplete. Required: host, user, database");
        }
    }
    
    // Getters
    const std::string& getHost() const { return host; }
    const std::string& getPort() const { return port; }
    const std::string& getUser() const { return user; }
    const std::string& getPassword() const { return password; }
    const std::string& getDatabase() const { return database; }
    const std::string& getEnvironment() const { return environment; }
    
    // libpqxx connection string
    std::string getConnectionString() const {
        return "postgresql://" + user + ":" + password + "@" + host + ":" + port + "/" + database;
    }
    
    // Individual components for libpqxx connection
    std::string getLibpqxxString() const {
        return "host=" + host + " port=" + port + " dbname=" + database + 
               " user=" + user + " password=" + password;
    }
    
    // Debug info (password hidden)
    std::string getDebugInfo() const {
        return "DB Config: " + user + "@" + host + ":" + port + "/" + database + " (" + environment + ")";
    }
};

} // namespace rdws